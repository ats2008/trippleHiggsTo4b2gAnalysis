#!/usr/bin/env python

import ROOT
import json
import pickle as pkl
import os,argparse
import Util as utl


def main():
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--cfg", help="cfg file" )
    
    args=parser.parse_args()
    cfg={}
    with open(args.cfg,'r') as f:
        cfg=json.load(f)

    yr=cfg['yr']
    tag=cfg['tag']
    hashStr=cfg['hash']
    dest=cfg['destination']
    doOnlyNominal=cfg['doOnlyNominal']
    rdataFrames={yr : { tag : {}} }
    treeFolderName=cfg['path']
    
    idx=0
    for fname in cfg['files']:
        
        fileIn=ROOT.TFile.Open(fname)
        systDict={}
        baseTag=None
        treeDir=fileIn.Get(treeFolderName)
        treeDir.Print()
        for ky in treeDir.GetListOfKeys():
            name=str(ky.GetName())
            base     ='_'.join(name.split('_')[:-1])
            syst_tag =name.split('_')[-1]
            if syst_tag=='0':
                syst_tag='nominal'
                baseTag=name
            if doOnlyNominal:
                if 'nominal' not in syst_tag:
                    continue
            print("Getting ",name)
            systDict[syst_tag]=fileIn.Get(treeFolderName+'/'+name)
            if systDict[syst_tag]:
                print("\tGot Sucessfully !",systDict[syst_tag].GetEntries())
        for sysTag in systDict:
            ofname=f"{dest}/{tag}_{yr}_{hashStr}_{idx}_{sysTag}.root"
            print(f"Writing out syst {sysTag} to the file {ofname}")
            f=ROOT.TFile(ofname,"RECREATE")
            f.mkdir(treeFolderName)
            f.cd(treeFolderName)
            treeOut=systDict[sysTag].CloneTree()
            treeOut.SetName(baseTag)
            treeOut.Write()
            f.Purge()
            f.Close()
            
        idx+=1


if __name__=='__main__':
    main()    
